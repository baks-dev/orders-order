/*
 *  Copyright 2025.  Baks.dev <admin@baks.dev>
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is furnished
 *  to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

var containers=document.querySelectorAll(".draggable-zone");let selectedOrders=new Set;let status=null;const form=document.forms.order_delivery_filter_form;form.addEventListener("change",(()=>{setTimeout((()=>{form.submit()}),300)}));function getToken(url,ctx){return new Promise(((resolve,reject)=>{fetch(url,{method:"POST",headers:new Headers({"Content-Type":"application/json"}),body:JSON.stringify(ctx)}).then((res=>{if(!res.ok){throw new Error(`Unexpected status code ${res.status}`)}return res.json()})).then((data=>{resolve(data.token)})).catch((err=>{reject(err)}))}))}executeFunc((function P8X1I2diQ4(){if(typeof Droppable!=="object"||typeof bootstrap!=="object"){return false}function initCheckboxHandlers(){const checkboxes=document.querySelectorAll('.draggable input[type="checkbox"]');console.log("Найдено чекбоксов:",checkboxes.length);checkboxes.forEach((checkbox=>{checkbox.checked=false;checkbox.addEventListener("change",(function(){const orderId=this.closest(".draggable").id;const draggableElement=this.closest(".draggable");status=checkbox.dataset.status;console.log("Чекбокс изменен для заказа:",orderId,"Checked:",this.checked);if(this.checked){selectedOrders.add(orderId);draggableElement.classList.add("selected-order");console.log("Заказ добавлен в selectedOrders:",orderId)}else{selectedOrders.delete(orderId);draggableElement.classList.remove("selected-order");console.log("Заказ удален из selectedOrders:",orderId)}console.log("Текущий список selectedOrders:",Array.from(selectedOrders));updateSelectedOrdersVisuals()}))}))}function updateSelectedOrdersVisuals(){const allDraggables=document.querySelectorAll(".draggable");allDraggables.forEach((draggable=>{const orderId=draggable.id;const draggableHandle=draggable.querySelector(".draggable-handle");const draggableCheckbox=draggable.querySelector('input[type="checkbox"]');if(selectedOrders.has(orderId)){draggable.classList.remove("opacity-50");draggable.classList.replace("z-0","z-3");draggable.style.transform="scale(0.98)";draggable.style.boxShadow="0 0 0 2px #007bff";if(draggableHandle){draggableHandle.style.pointerEvents="auto"}}else{draggable.removeAttribute("style");if(draggableHandle){if(selectedOrders.size>0){draggable.classList.add("opacity-50");draggableHandle.style.pointerEvents="none";if(draggableCheckbox.dataset.status!==status){draggableCheckbox.disabled=true}}if(selectedOrders.size===0){draggable.classList.remove("opacity-50");draggableHandle.style.pointerEvents="auto";draggableCheckbox.disabled=false;status=null}}}}))}function createMultipleDragIndicator(count){const indicator=document.createElement("div");indicator.className="multiple-drag-indicator";indicator.style.cssText=`\n            position: absolute;\n            top: -10px;\n            right: -10px;\n            background: #007bff;\n            color: white;\n            border-radius: 50%;\n            width: 24px;\n            height: 24px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 12px;\n            font-weight: bold;\n            z-index: 1000;\n        `;indicator.textContent=count;return indicator}initCheckboxHandlers();const modal=document.getElementById("modal");const modal_bootstrap=bootstrap.Modal.getOrCreateInstance(modal);var droppable=new Droppable.default(containers,{draggable:".draggable",dropzone:".draggable-zone",handle:".draggable .draggable-handle",mirror:{appendTo:"body",constrainDimensions:true}});let droppableOrigin;let droppableLevel;let droppableRestrict;let toDroppable;let isDraggingSelected=false;let draggedOrderIds=[];droppable.on("drag:start",(e=>{document.body.style.overflow="hidden";const draggedOrderId=e.originalSource.id;console.log("Drag start для заказа:",draggedOrderId);console.log("Выбранные заказы:",Array.from(selectedOrders));console.log("Размер выбранных:",selectedOrders.size);if(selectedOrders.has(draggedOrderId)&&selectedOrders.size>1){isDraggingSelected=true;draggedOrderIds=Array.from(selectedOrders);console.log("Групповое перетаскивание активировано для:",draggedOrderIds);const indicator=createMultipleDragIndicator(selectedOrders.size);e.originalSource.appendChild(indicator);selectedOrders.forEach((orderId=>{const element=document.getElementById(orderId);if(element&&element!==e.originalSource){if(element.id!==draggedOrderId){element.classList.add("d-none")}}}))}else{isDraggingSelected=false;draggedOrderIds=[draggedOrderId];console.log("Одиночное перетаскивание для:",draggedOrderId)}}));droppable.on("drag:over",(e=>{}));droppable.on("drag:stop",(async e=>{const indicator=e.originalSource.querySelector(".multiple-drag-indicator");if(indicator){indicator.remove()}containers.forEach((c=>{c.classList.remove("draggable-dropzone--occupied")}));document.body.style.overflow="auto";let level=e.sourceContainer.getAttribute("data-status");if(e.sourceContainer.getAttribute("data-status")!==droppableLevel&&droppableRestrict!=="restricted"){let ordersToProcess=[];if(isDraggingSelected&&draggedOrderIds.length>1){ordersToProcess=draggedOrderIds;console.log(`Групповое перетаскивание ${ordersToProcess.length} заказов:`,ordersToProcess)}else{ordersToProcess=[e.originalSource.id];console.log("Одиночное перетаскивание заказа:",ordersToProcess[0])}console.log(`Из статуса ${level} в статус ${droppableLevel}`);modal.innerHTML='<div class="modal-dialog modal-dialog-centered"><div class="d-flex justify-content-center w-100"><div class="spinner-border text-light" role="status"><span class="visually-hidden">Loading...</span></div></div></div>';modal_bootstrap.show();try{let formData=new FormData;ordersToProcess.forEach(((id,index)=>{formData.append(`${droppableLevel}_orders_form[orders][${index}][id]`,id)}));const response=await fetch("/admin/order/"+droppableLevel,{method:"POST",headers:{"X-Requested-With":"XMLHttpRequest"},body:formData});if(response.status===302||response.status===404){formData=new FormData;ordersToProcess.forEach(((id,index)=>{formData.append(`status_form[orders][${index}][id]`,id)}));await fetch("/admin/order/status/"+droppableLevel,{method:"POST",headers:{"X-Requested-With":"XMLHttpRequest"},body:formData});selectedOrders.clear();updateSelectedOrdersVisuals();modal_bootstrap.hide();createToast(JSON.parse('{ "type":"success" , '+'"header" : "Обновление заказов"  , '+'"message" : "Статус заказов успешно обновлен" }'));return}if(response.status===200){const result=await response.text();selectedOrders.clear();updateSelectedOrdersVisuals();modal.innerHTML=result;let lazy=document.createElement("script");lazy.src="/assets/{{ version }}/js/lazyload.min.js?v={{ version }}";document.head.appendChild(lazy)}else{throw new Error(`Unexpected status code ${response.status}`)}}catch(error){modal_bootstrap.hide();selectedOrders.clear();updateSelectedOrdersVisuals();console.error("Ошибка обновления:",error);let $dangerOrderToast='{ "type":"danger" , '+'"header":"Ошибка сети"  , '+'"message" : "Ошибка при отправке запроса на сервер!" }';createToast(JSON.parse($dangerOrderToast))}}isDraggingSelected=false;draggedOrderIds=[]}));droppable.on("droppable:dropped",(e=>{toDroppable=e.dropzone;droppableLevel=e.dropzone.getAttribute("data-status");droppableRestrict=e.dropzone.getAttribute("data-level");if(droppableRestrict==="restricted"){e.cancel()}}));return true}));