var containers=document.querySelectorAll(".draggable-zone");let selectedOrders=new Set;const form=document.forms.order_delivery_filter_form;form.addEventListener("change",()=>{setTimeout(()=>{form.submit()},300)});function getToken(url,ctx){return new Promise((resolve,reject)=>{fetch(url,{method:"POST",headers:new Headers({"Content-Type":"application/json"}),body:JSON.stringify(ctx)}).then(res=>{if(!res.ok){throw new Error(`Unexpected status code ${res.status}`)}return res.json()}).then(data=>{resolve(data.token)}).catch(err=>{reject(err)})})}executeFunc(function P8X1I2diQ4(){if(typeof Droppable!=="object"||typeof bootstrap!=="object"){return false}function initCheckboxHandlers(){const checkboxes=document.querySelectorAll('.draggable input[type="checkbox"]');checkboxes.forEach(checkbox=>{checkbox.addEventListener("change",function(){const orderId=this.closest(".draggable").id;const draggableElement=this.closest(".draggable");if(this.checked){selectedOrders.add(orderId);draggableElement.classList.add("selected-order")}else{selectedOrders.delete(orderId);draggableElement.classList.remove("selected-order")}updateSelectedOrdersVisuals()})})}function updateSelectedOrdersVisuals(){const allDraggables=document.querySelectorAll(".draggable");allDraggables.forEach(draggable=>{const orderId=draggable.id;const draggableHandle=draggable.querySelector(".draggable-handle");if(selectedOrders.has(orderId)){draggable.style.opacity="0.8";draggable.style.transform="scale(0.98)";draggable.style.boxShadow="0 0 0 2px #007bff";if(draggableHandle){draggableHandle.style.pointerEvents="auto";draggableHandle.style.opacity="1"}}else{draggable.style.opacity="";draggable.style.transform="";draggable.style.boxShadow="";if(draggableHandle&&selectedOrders.size>0){draggableHandle.style.pointerEvents="none";draggableHandle.style.opacity="0.3";draggable.style.opacity="0.5"}else if(draggableHandle){draggableHandle.style.pointerEvents="auto";draggableHandle.style.opacity="1"}}})}function createMultipleDragIndicator(count){const indicator=document.createElement("div");indicator.className="multiple-drag-indicator";indicator.style.cssText=`\n            position: absolute;\n            top: -10px;\n            right: -10px;\n            background: #007bff;\n            color: white;\n            border-radius: 50%;\n            width: 24px;\n            height: 24px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 12px;\n            font-weight: bold;\n            z-index: 1000;\n        `;indicator.textContent=count;return indicator}initCheckboxHandlers();const modal=document.getElementById("modal");const modal_bootstrap=bootstrap.Modal.getOrCreateInstance(modal);var droppable=new Droppable.default(containers,{draggable:".draggable",dropzone:".draggable-zone",handle:".draggable .draggable-handle",mirror:{appendTo:"body",constrainDimensions:true},delay:0,distance:0,plugins:[]});let currentDropZone=null;function getDropZoneFromBounds(x,y){for(let container of containers){const rect=container.getBoundingClientRect();if(x>=rect.left&&x<=rect.right&&y>=rect.top&&y<=rect.bottom){const dataLevel=container.getAttribute("data-level");if(dataLevel!=="restricted"){return container}}}return null}function getDropZoneFromPoint(x,y){const mirror=document.querySelector(".draggable-mirror");let mirrorDisplay=null;if(mirror){mirrorDisplay=mirror.style.display;mirror.style.display="none"}const elements=document.elementsFromPoint(x,y);if(mirror&&mirrorDisplay!==null){mirror.style.display=mirrorDisplay}for(let element of elements){if(element.classList.contains("draggable")||element.closest(".draggable")){continue}if(element.classList.contains("draggable-zone")){return element}let parent=element.closest(".draggable-zone");if(parent){return parent}let statusContainer=element.closest("[data-status]");if(statusContainer&&statusContainer.classList.contains("draggable-zone")){return statusContainer}}const alternativeResult=getDropZoneFromBounds(x,y);if(alternativeResult){return alternativeResult}return null}let droppableOrigin;let droppableLevel=null;let droppableRestrict;let toDroppable;let isDraggingSelected=false;let draggedOrderIds=[];let isProcessingDrop=false;function reinitCheckboxHandlers(){const oldCheckboxes=document.querySelectorAll('.draggable input[type="checkbox"]');oldCheckboxes.forEach(checkbox=>{checkbox.replaceWith(checkbox.cloneNode(true))});initCheckboxHandlers()}let isCurrentlyDragging=false;let draggedElement=null;droppable.on("drag:start",e=>{document.body.style.overflow="hidden";isCurrentlyDragging=true;draggedElement=e.originalSource;droppableLevel=null;const draggedOrderId=e.originalSource.id;if(selectedOrders.has(draggedOrderId)&&selectedOrders.size>1){isDraggingSelected=true;draggedOrderIds=Array.from(selectedOrders);const indicator=createMultipleDragIndicator(selectedOrders.size);e.originalSource.appendChild(indicator);selectedOrders.forEach(orderId=>{const element=document.getElementById(orderId);if(element&&element!==e.originalSource){element.style.opacity="0.5";element.style.transition="opacity 0.2s ease"}})}else{isDraggingSelected=false;draggedOrderIds=[draggedOrderId]}document.addEventListener("mousemove",handleMouseMove,true)});function handleMouseMove(e){if(!isCurrentlyDragging)return;const dropZone=getDropZoneFromPoint(e.clientX,e.clientY);if(dropZone&&dropZone!==currentDropZone){currentDropZone=dropZone;droppableLevel=dropZone.getAttribute("data-status");droppableRestrict=dropZone.getAttribute("data-level");containers.forEach(c=>c.classList.remove("draggable-dropzone--active"));if(droppableRestrict!=="restricted"){dropZone.classList.add("draggable-dropzone--active")}}else if(!dropZone&&currentDropZone){containers.forEach(c=>c.classList.remove("draggable-dropzone--active"));currentDropZone=null;droppableLevel=null;droppableRestrict=null}}droppable.on("drag:over",e=>{if(e.overContainer){droppableLevel=e.overContainer.getAttribute("data-status");droppableRestrict=e.overContainer.getAttribute("data-level")}});droppable.on("drag:stop",async e=>{isCurrentlyDragging=false;draggedElement=null;document.removeEventListener("mousemove",handleMouseMove,true);containers.forEach(c=>c.classList.remove("draggable-dropzone--active"));const indicator=e.originalSource.querySelector(".multiple-drag-indicator");if(indicator){indicator.remove()}if(isDraggingSelected){selectedOrders.forEach(orderId=>{const element=document.getElementById(orderId);if(element){element.style.opacity="";element.style.transition=""}})}containers.forEach(c=>{c.classList.remove("draggable-dropzone--occupied")});document.body.style.overflow="auto";let level=e.sourceContainer.getAttribute("data-status");if(!droppableLevel&&currentDropZone){droppableLevel=currentDropZone.getAttribute("data-status");droppableRestrict=currentDropZone.getAttribute("data-level")}if(droppableLevel&&level!==droppableLevel&&droppableRestrict!=="restricted"){const targetZone=document.querySelector(`[data-status="${droppableLevel}"]`);const wasFullDrop=targetZone&&targetZone.classList.contains("draggable-dropzone--occupied");if(wasFullDrop){return}let ordersToProcess=[];const mainDraggedOrderId=e.originalSource.id;if(isDraggingSelected&&draggedOrderIds.length>1){ordersToProcess=draggedOrderIds}else{ordersToProcess=[mainDraggedOrderId]}if(targetZone){const mainElement=document.getElementById(mainDraggedOrderId);if(mainElement){console.log("Основная карточка текущий родитель:",mainElement.parentNode);console.log("Основная карточка уже в целевой зоне:",mainElement.parentNode===targetZone)}let movedCount=0;ordersToProcess.forEach(orderId=>{const orderElement=document.getElementById(orderId);if(orderElement){if(orderElement.parentNode!==targetZone){targetZone.appendChild(orderElement);movedCount++}}});selectedOrders.clear();updateSelectedOrdersVisuals();setTimeout(()=>{ordersToProcess.forEach(orderId=>{const element=document.getElementById(orderId);if(element){const currentParent=element.parentNode;const currentStatus=currentParent?currentParent.getAttribute("data-status"):null;if(currentStatus!==droppableLevel){if(targetZone&&currentParent!==targetZone){targetZone.appendChild(element)}}}})},100)}else{console.error("Целевая зона не найдена для статуса:",droppableLevel)}modal.innerHTML='<div class="modal-dialog modal-dialog-centered"><div class="d-flex justify-content-center w-100"><div class="spinner-border text-light" role="status"><span class="visually-hidden">Loading...</span></div></div></div>';modal_bootstrap.show();try{let formData=new FormData;ordersToProcess.forEach((id,index)=>{formData.append(`${droppableLevel}_orders_form[orders][${index}][id]`,id)});const response=await fetch("/admin/order/"+droppableLevel,{method:"POST",headers:{"X-Requested-With":"XMLHttpRequest"},body:formData});if(response.status===302||response.status===404){formData=new FormData;ordersToProcess.forEach((id,index)=>{formData.append(`status_form[orders][${index}][id]`,id)});await fetch("/admin/order/status/"+droppableLevel,{method:"POST",headers:{"X-Requested-With":"XMLHttpRequest"},body:formData});modal_bootstrap.hide();let $successOrderToast='{ "type":"success" , '+'"header":"Успешно"  , '+'"message" : "Статус заказов обновлен!" }';createToast(JSON.parse($successOrderToast))}else if(response.status===200){const result=await response.text();modal.innerHTML=result;let lazy=document.createElement("script");lazy.src="/assets/js/lazyload.min.js?v={{ version }}";document.head.appendChild(lazy);setTimeout(()=>{reinitCheckboxHandlers()},100)}else{throw new Error(`Unexpected status code ${response.status}`)}}catch(error){modal_bootstrap.hide();console.error("Ошибка обновления:",error);let $dangerOrderToast='{ "type":"danger" , '+'"header":"Ошибка сети"  , '+'"message" : "Ошибка при отправке запроса на сервер!" }';createToast(JSON.parse($dangerOrderToast))}}isDraggingSelected=false;draggedOrderIds=[];droppableLevel=null;currentDropZone=null});droppable.on("droppable:dropped",e=>{if(!e.dropzone){return}if(!e.source){return}toDroppable=e.dropzone;droppableLevel=e.dropzone.getAttribute("data-status");droppableRestrict=e.dropzone.getAttribute("data-level");if(droppableRestrict==="restricted"){e.cancel();return}const draggedOrderId=e.source.id;if(!draggedOrderId){return}if(isDraggingSelected&&draggedOrderIds.length>1){draggedOrderIds.forEach(orderId=>{if(orderId!==draggedOrderId){const orderElement=document.getElementById(orderId);if(orderElement){const checkbox=orderElement.querySelector('input[type="checkbox"]');if(checkbox){checkbox.checked=false}orderElement.classList.remove("selected-order");orderElement.style.opacity="";orderElement.style.transform="";orderElement.style.boxShadow="";e.dropzone.appendChild(orderElement)}}});const mainElement=document.getElementById(draggedOrderId);if(mainElement){const checkbox=mainElement.querySelector('input[type="checkbox"]');if(checkbox){checkbox.checked=false}mainElement.classList.remove("selected-order");mainElement.style.opacity="";mainElement.style.transform="";mainElement.style.boxShadow=""}selectedOrders.clear();updateSelectedOrdersVisuals()}});return true});